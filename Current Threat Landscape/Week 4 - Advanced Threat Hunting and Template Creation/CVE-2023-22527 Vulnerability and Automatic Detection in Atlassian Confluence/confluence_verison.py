import json
import re
import requests
from colorama import Fore, Style
from bs4 import BeautifulSoup

# Get the latest version information from the API
api_url = "https://my.atlassian.com/download/feeds/current/confluence.json"
response = requests.get(api_url)
text = response.text
text = re.sub(r"downloads\(|\)", "", text)
data = json.loads(text)
downloads = []

# Loop through each item
for item in data:
    download = {
        "description": item.get("description", ""),
        "edition": item.get("edition", ""),
        "zipUrl": item.get("zipUrl", ""),
        "md5": item.get("md5", ""),
        "size": item.get("size", ""),
        "released": item.get("released", ""),
        "type": item.get("type", ""),
        "platform": item.get("platform", ""),
        "version": item.get("version", ""),
        "releaseNotes": item.get("releaseNotes", ""),
        "upgradeNotes": item.get("upgradeNotes", "")
    }
    # Add the formatted data to the list
    downloads.append(download)

# Product information (auto)
def get_product_info():
    url = "http://localhost:8090/"
    response = requests.get(url)
    html_content = response.text
    soup = BeautifulSoup(html_content, "html.parser")
    meta_tags = soup.find_all("meta")
    version_tag = None

    for tag in meta_tags:
        if tag.get("name") == "ajs-version-number":
            version_tag = tag
            break
    if version_tag:
        version = version_tag.get("content")
        return version
    else:
        return None

product_info = {
    "current_version": get_product_info(),
}

# Product information (manuel-test)
# product_info = {
 #    "product_name": "Confluence",
 #    "current_version": "7.8.9",
 #    "product_type": "Data Center",
 #    "release_type": "LTS"
# }

# Get product information
product_name = product_info["product_name"]
current_version = product_info["current_version"]
product_type = product_info["product_type"]
release_type = product_info["release_type"]

# If current_version is empty, display an error message
if not current_version:
    print(Fore.RED + "Error: current version is empty. Please enter the current version number." + Style.RESET_ALL)
else:
    # Check for updates using the latest version information obtained from the API
    latest_version = data[0].get("version")
    if latest_version:
        if latest_version > current_version:
            print(f"\nA new update is available!")
            print(f"Current version: {Fore.RED + current_version + Style.RESET_ALL}, Latest version: {Fore.GREEN + latest_version + Style.RESET_ALL}")
            update_url = data[0].get("upgradeNotes")
            if update_url:
                print("Please visit the following link for the update:", Fore.BLUE + update_url + Style.RESET_ALL)
            security_info = data[0].get("releaseNotes")
            if security_info:
                print(f"Release Notes: {Fore.BLUE + security_info}" + Style.RESET_ALL)
        else:
            print(Fore.GREEN + "The current version is the latest version. No update is required." + Style.RESET_ALL)
    else:
        print(Fore.RED + "Failed to retrieve the latest version information." + Style.RESET_ALL)
